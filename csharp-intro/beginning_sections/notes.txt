
C# vs .NET

C# is a language

.Net is a frame work for building applications on windows

.Net
CLR ( common language Runtime )

Class Library


C/C++  --> native langauge

(Just in time compilation  ) JIT
C# --> IL code (Intermediate )   -- > Native Code

applcation had class

class has Data and Method ( function )




class / Data / Methods
Car / make model Color / Start ()  Move  ()

Assembly  contains Namespaces which contains Class

obtain Visual studio

section 2 Summary

C# vs .NET

C# is a programming language, while .NET is a framework. It consists of a run-time environment (CLR) and a class library that we use for building applications.

CLR

When you compile an application, C# compiler compiles your code to IL (Intermediate Language) code. IL code is platform agnostics, which makes it possible to a take a C# program on a different computer with different hardware architecture and operating system and run it. For this to happen, we need CLR. When you run a C# application, CLR compiles the IL code into the native machine code for the computer on which it is running. This process is called Just-in-time Compilation (JIT).

Architecture of .NET Applications

In terms of architecture, an application written with C# consists of building blocks called classes. A class is a container for data (attributes) and methods (functions). Attributes represent the state of the application. Methods include code. They have logic. That's where we implement our algorithms and write code.

A namespace is a container for related classes. So as your application grows in size, you may want to group the related classes into various namespaces for better maintainability.

As the number of classes and namespaces even grow further, you may want to physically separate related namespaces into separate assemblies. An assembly is a file (DLL or EXE) that contains one or more namespaces and classes. An EXE file represents a program that can be executed. A DLL is a file that includes code that can be re-used across different programs.

In the next section, you'll learn about basics of the C# language, including variables, constants, type conversion and operators.




section 3

Variables / Constants

local variables  Camel Case

constants Pascal Case

 255 larges numnber in C#

 Implicit Type Conversion

 byte b = 1;

 int i = b    no data loss


 explicit type

 int i = 1

 byte b = i ( data loss )

Non- compatible types

string s = "1";

int i = convert.ToInt32(s);

int j = int.Parse(s)

CLASS

Person
----------
Fields:
Name - string
Age - byte
Height - float
weight - byte

methods:
walk ()
Talk ()
Eat()
Sleep()

Objects  / John Mary Jack


Structs are like class
there are tiny differents
use a structs when using light programing

jagged arrays

1111
11111
111

var array = new int [3][]

array[0] = new int [4]
array[1] = new int [5]
array[2] = new int [3]